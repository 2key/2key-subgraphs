// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Conversion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Conversion entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Conversion entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Conversion", id.toString(), this);
  }

  static load(id: string): Conversion | null {
    return store.get("Conversion", id) as Conversion | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaignType(): string | null {
    let value = this.get("_campaignType");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _campaignType(value: string | null) {
    if (value === null) {
      this.unset("_campaignType");
    } else {
      this.set("_campaignType", Value.fromString(value as string));
    }
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _status(): string | null {
    let value = this.get("_status");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _status(value: string | null) {
    if (value === null) {
      this.unset("_status");
    } else {
      this.set("_status", Value.fromString(value as string));
    }
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _participate(): string {
    let value = this.get("_participate");
    return value.toString();
  }

  set _participate(value: string) {
    this.set("_participate", Value.fromString(value));
  }

  get _fiatAmountSpent(): BigInt | null {
    let value = this.get("_fiatAmountSpent");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _fiatAmountSpent(value: BigInt | null) {
    if (value === null) {
      this.unset("_fiatAmountSpent");
    } else {
      this.set("_fiatAmountSpent", Value.fromBigInt(value as BigInt));
    }
  }

  get _ethAmountSpent(): BigInt | null {
    let value = this.get("_ethAmountSpent");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _ethAmountSpent(value: BigInt | null) {
    if (value === null) {
      this.unset("_ethAmountSpent");
    } else {
      this.set("_ethAmountSpent", Value.fromBigInt(value as BigInt));
    }
  }

  get _tokens(): BigInt | null {
    let value = this.get("_tokens");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _tokens(value: BigInt | null) {
    if (value === null) {
      this.unset("_tokens");
    } else {
      this.set("_tokens", Value.fromBigInt(value as BigInt));
    }
  }

  get _isFiatConversion(): boolean {
    let value = this.get("_isFiatConversion");
    return value.toBoolean();
  }

  set _isFiatConversion(value: boolean) {
    this.set("_isFiatConversion", Value.fromBoolean(value));
  }

  get _refundable(): boolean {
    let value = this.get("_refundable");
    return value.toBoolean();
  }

  set _refundable(value: boolean) {
    this.set("_refundable", Value.fromBoolean(value));
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _execution_tx_hash(): Bytes | null {
    let value = this.get("_execution_tx_hash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _execution_tx_hash(value: Bytes | null) {
    if (value === null) {
      this.unset("_execution_tx_hash");
    } else {
      this.set("_execution_tx_hash", Value.fromBytes(value as Bytes));
    }
  }

  get _conversionId(): BigInt | null {
    let value = this.get("_conversionId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _conversionId(value: BigInt | null) {
    if (value === null) {
      this.unset("_conversionId");
    } else {
      this.set("_conversionId", Value.fromBigInt(value as BigInt));
    }
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class ConversionByTxHash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ConversionByTxHash entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConversionByTxHash entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConversionByTxHash", id.toString(), this);
  }

  static load(id: string): ConversionByTxHash | null {
    return store.get("ConversionByTxHash", id) as ConversionByTxHash | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _conversion(): string | null {
    let value = this.get("_conversion");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _conversion(value: string | null) {
    if (value === null) {
      this.unset("_conversion");
    } else {
      this.set("_conversion", Value.fromString(value as string));
    }
  }
}

export class Price extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Price entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Price entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Price", id.toString(), this);
  }

  static load(id: string): Price | null {
    return store.get("Price", id) as Price | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _currency(): string | null {
    let value = this.get("_currency");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _currency(value: string | null) {
    if (value === null) {
      this.unset("_currency");
    } else {
      this.set("_currency", Value.fromString(value as string));
    }
  }

  get _rate(): BigInt {
    let value = this.get("_rate");
    return value.toBigInt();
  }

  set _rate(value: BigInt) {
    this.set("_rate", Value.fromBigInt(value));
  }

  get _updater(): string {
    let value = this.get("_updater");
    return value.toString();
  }

  set _updater(value: string) {
    this.set("_updater", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UserReg extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserReg entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserReg entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserReg", id.toString(), this);
  }

  static load(id: string): UserReg | null {
    return store.get("UserReg", id) as UserReg | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _name(): string | null {
    let value = this.get("_name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _name(value: string | null) {
    if (value === null) {
      this.unset("_name");
    } else {
      this.set("_name", Value.fromString(value as string));
    }
  }

  get _fullName(): string | null {
    let value = this.get("_fullName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _fullName(value: string | null) {
    if (value === null) {
      this.unset("_fullName");
    } else {
      this.set("_fullName", Value.fromString(value as string));
    }
  }

  get _email(): string | null {
    let value = this.get("_email");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _email(value: string | null) {
    if (value === null) {
      this.unset("_email");
    } else {
      this.set("_email", Value.fromString(value as string));
    }
  }

  get _walletName(): string | null {
    let value = this.get("_walletName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _walletName(value: string | null) {
    if (value === null) {
      this.unset("_walletName");
    } else {
      this.set("_walletName", Value.fromString(value as string));
    }
  }

  get _web3(): Bytes | null {
    let value = this.get("_web3");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _web3(value: Bytes | null) {
    if (value === null) {
      this.unset("_web3");
    } else {
      this.set("_web3", Value.fromBytes(value as Bytes));
    }
  }

  get _address(): Bytes | null {
    let value = this.get("_address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _address(value: Bytes | null) {
    if (value === null) {
      this.unset("_address");
    } else {
      this.set("_address", Value.fromBytes(value as Bytes));
    }
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _tx_hash(): string | null {
    let value = this.get("_tx_hash");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _tx_hash(value: string | null) {
    if (value === null) {
      this.unset("_tx_hash");
    } else {
      this.set("_tx_hash", Value.fromString(value as string));
    }
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Campaign entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Campaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Campaign", id.toString(), this);
  }

  static load(id: string): Campaign | null {
    return store.get("Campaign", id) as Campaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _owner(): string | null {
    let value = this.get("_owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _owner(value: string | null) {
    if (value === null) {
      this.unset("_owner");
    } else {
      this.set("_owner", Value.fromString(value as string));
    }
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _n_conversions(): i32 {
    let value = this.get("_n_conversions");
    return value.toI32();
  }

  set _n_conversions(value: i32) {
    this.set("_n_conversions", Value.fromI32(value));
  }

  get _n_conversions_executed(): i32 {
    let value = this.get("_n_conversions_executed");
    return value.toI32();
  }

  set _n_conversions_executed(value: i32) {
    this.set("_n_conversions_executed", Value.fromI32(value));
  }

  get _n_unique_converters(): i32 {
    let value = this.get("_n_unique_converters");
    return value.toI32();
  }

  set _n_unique_converters(value: i32) {
    this.set("_n_unique_converters", Value.fromI32(value));
  }

  get _n_conversions_approved(): i32 {
    let value = this.get("_n_conversions_approved");
    return value.toI32();
  }

  set _n_conversions_approved(value: i32) {
    this.set("_n_conversions_approved", Value.fromI32(value));
  }

  get _n_conversions_rejected(): i32 {
    let value = this.get("_n_conversions_rejected");
    return value.toI32();
  }

  set _n_conversions_rejected(value: i32) {
    this.set("_n_conversions_rejected", Value.fromI32(value));
  }

  get _converters_addresses(): Array<string> | null {
    let value = this.get("_converters_addresses");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _converters_addresses(value: Array<string> | null) {
    if (value === null) {
      this.unset("_converters_addresses");
    } else {
      this.set(
        "_converters_addresses",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get _type(): string | null {
    let value = this.get("_type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _type(value: string | null) {
    if (value === null) {
      this.unset("_type");
    } else {
      this.set("_type", Value.fromString(value as string));
    }
  }

  get _pricePerUnit(): BigInt | null {
    let value = this.get("_pricePerUnit");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _pricePerUnit(value: BigInt | null) {
    if (value === null) {
      this.unset("_pricePerUnit");
    } else {
      this.set("_pricePerUnit", Value.fromBigInt(value as BigInt));
    }
  }

  get _conversionHandler(): Bytes | null {
    let value = this.get("_conversionHandler");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _conversionHandler(value: Bytes | null) {
    if (value === null) {
      this.unset("_conversionHandler");
    } else {
      this.set("_conversionHandler", Value.fromBytes(value as Bytes));
    }
  }

  get _logicHandler(): Bytes | null {
    let value = this.get("_logicHandler");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _logicHandler(value: Bytes | null) {
    if (value === null) {
      this.unset("_logicHandler");
    } else {
      this.set("_logicHandler", Value.fromBytes(value as Bytes));
    }
  }

  get _purchasesHandler(): Bytes | null {
    let value = this.get("_purchasesHandler");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _purchasesHandler(value: Bytes | null) {
    if (value === null) {
      this.unset("_purchasesHandler");
    } else {
      this.set("_purchasesHandler", Value.fromBytes(value as Bytes));
    }
  }

  get _total_rewards(): BigInt | null {
    let value = this.get("_total_rewards");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _total_rewards(value: BigInt | null) {
    if (value === null) {
      this.unset("_total_rewards");
    } else {
      this.set("_total_rewards", Value.fromBigInt(value as BigInt));
    }
  }

  get _moderator(): string | null {
    let value = this.get("_moderator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _moderator(value: string | null) {
    if (value === null) {
      this.unset("_moderator");
    } else {
      this.set("_moderator", Value.fromString(value as string));
    }
  }

  get _n_joined(): i32 {
    let value = this.get("_n_joined");
    return value.toI32();
  }

  set _n_joined(value: i32) {
    this.set("_n_joined", Value.fromI32(value));
  }

  get _n_rewards(): i32 {
    let value = this.get("_n_rewards");
    return value.toI32();
  }

  set _n_rewards(value: i32) {
    this.set("_n_rewards", Value.fromI32(value));
  }

  get _total_rewards_amount(): BigInt | null {
    let value = this.get("_total_rewards_amount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _total_rewards_amount(value: BigInt | null) {
    if (value === null) {
      this.unset("_total_rewards_amount");
    } else {
      this.set("_total_rewards_amount", Value.fromBigInt(value as BigInt));
    }
  }

  get _total_conversions_amount(): BigInt | null {
    let value = this.get("_total_conversions_amount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _total_conversions_amount(value: BigInt | null) {
    if (value === null) {
      this.unset("_total_conversions_amount");
    } else {
      this.set("_total_conversions_amount", Value.fromBigInt(value as BigInt));
    }
  }

  get _rejected_conversions(): i32 {
    let value = this.get("_rejected_conversions");
    return value.toI32();
  }

  set _rejected_conversions(value: i32) {
    this.set("_rejected_conversions", Value.fromI32(value));
  }

  get _conversions(): Array<string> {
    let value = this.get("_conversions");
    return value.toStringArray();
  }

  set _conversions(value: Array<string>) {
    this.set("_conversions", Value.fromStringArray(value));
  }

  get _joins(): Array<string> {
    let value = this.get("_joins");
    return value.toStringArray();
  }

  set _joins(value: Array<string>) {
    this.set("_joins", Value.fromStringArray(value));
  }

  get _rewards(): Array<string> {
    let value = this.get("_rewards");
    return value.toStringArray();
  }

  set _rewards(value: Array<string>) {
    this.set("_rewards", Value.fromStringArray(value));
  }

  get _fee(): Array<string> {
    let value = this.get("_fee");
    return value.toStringArray();
  }

  set _fee(value: Array<string>) {
    this.set("_fee", Value.fromStringArray(value));
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Meta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Meta entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Meta entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Meta", id.toString(), this);
  }

  static load(id: string): Meta | null {
    return store.get("Meta", id) as Meta | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _totalDebtAdded2key(): BigInt | null {
    let value = this.get("_totalDebtAdded2key");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtAdded2key(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtAdded2key");
    } else {
      this.set("_totalDebtAdded2key", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtRemoved2key(): BigInt | null {
    let value = this.get("_totalDebtRemoved2key");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtRemoved2key(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtRemoved2key");
    } else {
      this.set("_totalDebtRemoved2key", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtAddedDAI(): BigInt | null {
    let value = this.get("_totalDebtAddedDAI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtAddedDAI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtAddedDAI");
    } else {
      this.set("_totalDebtAddedDAI", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtRemovedDAI(): BigInt | null {
    let value = this.get("_totalDebtRemovedDAI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtRemovedDAI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtRemovedDAI");
    } else {
      this.set("_totalDebtRemovedDAI", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtAddedETHWEI(): BigInt | null {
    let value = this.get("_totalDebtAddedETHWEI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtAddedETHWEI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtAddedETHWEI");
    } else {
      this.set("_totalDebtAddedETHWEI", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtRemovedETHWEI(): BigInt | null {
    let value = this.get("_totalDebtRemovedETHWEI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtRemovedETHWEI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtRemovedETHWEI");
    } else {
      this.set("_totalDebtRemovedETHWEI", Value.fromBigInt(value as BigInt));
    }
  }

  get _n_debtAdded(): i32 {
    let value = this.get("_n_debtAdded");
    return value.toI32();
  }

  set _n_debtAdded(value: i32) {
    this.set("_n_debtAdded", Value.fromI32(value));
  }

  get _n_debtRemoved(): i32 {
    let value = this.get("_n_debtRemoved");
    return value.toI32();
  }

  set _n_debtRemoved(value: i32) {
    this.set("_n_debtRemoved", Value.fromI32(value));
  }

  get _n_moderatorFee(): i32 {
    let value = this.get("_n_moderatorFee");
    return value.toI32();
  }

  set _n_moderatorFee(value: i32) {
    this.set("_n_moderatorFee", Value.fromI32(value));
  }

  get _n_tokenPoolFee(): i32 {
    let value = this.get("_n_tokenPoolFee");
    return value.toI32();
  }

  set _n_tokenPoolFee(value: i32) {
    this.set("_n_tokenPoolFee", Value.fromI32(value));
  }

  get _totalTokenPoolFee(): BigInt | null {
    let value = this.get("_totalTokenPoolFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalTokenPoolFee(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalTokenPoolFee");
    } else {
      this.set("_totalTokenPoolFee", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalModeratorFee(): BigInt | null {
    let value = this.get("_totalModeratorFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalModeratorFee(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalModeratorFee");
    } else {
      this.set("_totalModeratorFee", Value.fromBigInt(value as BigInt));
    }
  }

  get _userRegisteredCounter(): i32 {
    let value = this.get("_userRegisteredCounter");
    return value.toI32();
  }

  set _userRegisteredCounter(value: i32) {
    this.set("_userRegisteredCounter", Value.fromI32(value));
  }

  get _convertedAcquisitionCounter(): i32 {
    let value = this.get("_convertedAcquisitionCounter");
    return value.toI32();
  }

  set _convertedAcquisitionCounter(value: i32) {
    this.set("_convertedAcquisitionCounter", Value.fromI32(value));
  }

  get _convertedDonationCounter(): i32 {
    let value = this.get("_convertedDonationCounter");
    return value.toI32();
  }

  set _convertedDonationCounter(value: i32) {
    this.set("_convertedDonationCounter", Value.fromI32(value));
  }

  get _total_rewards_amount(): BigInt {
    let value = this.get("_total_rewards_amount");
    return value.toBigInt();
  }

  set _total_rewards_amount(value: BigInt) {
    this.set("_total_rewards_amount", Value.fromBigInt(value));
  }

  get _n_conversions(): i32 {
    let value = this.get("_n_conversions");
    return value.toI32();
  }

  set _n_conversions(value: i32) {
    this.set("_n_conversions", Value.fromI32(value));
  }

  get _cpcCampaignCreatedCounter(): i32 {
    let value = this.get("_cpcCampaignCreatedCounter");
    return value.toI32();
  }

  set _cpcCampaignCreatedCounter(value: i32) {
    this.set("_cpcCampaignCreatedCounter", Value.fromI32(value));
  }

  get _total_conversions_amount(): BigInt {
    let value = this.get("_total_conversions_amount");
    return value.toBigInt();
  }

  set _total_conversions_amount(value: BigInt) {
    this.set("_total_conversions_amount", Value.fromBigInt(value));
  }

  get _createdCounter(): i32 {
    let value = this.get("_createdCounter");
    return value.toI32();
  }

  set _createdCounter(value: i32) {
    this.set("_createdCounter", Value.fromI32(value));
  }

  get _joinedCounter(): i32 {
    let value = this.get("_joinedCounter");
    return value.toI32();
  }

  set _joinedCounter(value: i32) {
    this.set("_joinedCounter", Value.fromI32(value));
  }

  get _convertedCounter(): i32 {
    let value = this.get("_convertedCounter");
    return value.toI32();
  }

  set _convertedCounter(value: i32) {
    this.set("_convertedCounter", Value.fromI32(value));
  }

  get _rewardedCounter(): i32 {
    let value = this.get("_rewardedCounter");
    return value.toI32();
  }

  set _rewardedCounter(value: i32) {
    this.set("_rewardedCounter", Value.fromI32(value));
  }

  get _n_reputationEvents(): i32 {
    let value = this.get("_n_reputationEvents");
    return value.toI32();
  }

  set _n_reputationEvents(value: i32) {
    this.set("_n_reputationEvents", Value.fromI32(value));
  }

  get _acquisitionCampaignCreatedCounter(): i32 {
    let value = this.get("_acquisitionCampaignCreatedCounter");
    return value.toI32();
  }

  set _acquisitionCampaignCreatedCounter(value: i32) {
    this.set("_acquisitionCampaignCreatedCounter", Value.fromI32(value));
  }

  get _donationCampaignCreatedCounter(): i32 {
    let value = this.get("_donationCampaignCreatedCounter");
    return value.toI32();
  }

  set _donationCampaignCreatedCounter(value: i32) {
    this.set("_donationCampaignCreatedCounter", Value.fromI32(value));
  }

  get _rejectedCounter(): i32 {
    let value = this.get("_rejectedCounter");
    return value.toI32();
  }

  set _rejectedCounter(value: i32) {
    this.set("_rejectedCounter", Value.fromI32(value));
  }

  get _executedCounter(): i32 {
    let value = this.get("_executedCounter");
    return value.toI32();
  }

  set _executedCounter(value: i32) {
    this.set("_executedCounter", Value.fromI32(value));
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _lastBlock(): BigInt | null {
    let value = this.get("_lastBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _lastBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("_lastBlock");
    } else {
      this.set("_lastBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }

  get _contracts(): Array<Bytes> | null {
    let value = this.get("_contracts");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set _contracts(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("_contracts");
    } else {
      this.set("_contracts", Value.fromBytesArray(value as Array<Bytes>));
    }
  }
}

export class Variable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Variable entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Variable entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Variable", id.toString(), this);
  }

  static load(id: string): Variable | null {
    return store.get("Variable", id) as Variable | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _variableId(): string {
    let value = this.get("_variableId");
    return value.toString();
  }

  set _variableId(value: string) {
    this.set("_variableId", Value.fromString(value));
  }
}

export class Rate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Rate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Rate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Rate", id.toString(), this);
  }

  static load(id: string): Rate | null {
    return store.get("Rate", id) as Rate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _from(): string {
    let value = this.get("_from");
    return value.toString();
  }

  set _from(value: string) {
    this.set("_from", Value.fromString(value));
  }

  get _to(): string {
    let value = this.get("_to");
    return value.toString();
  }

  set _to(value: string) {
    this.set("_to", Value.fromString(value));
  }

  get _rate(): BigInt {
    let value = this.get("_rate");
    return value.toBigInt();
  }

  set _rate(value: BigInt) {
    this.set("_rate", Value.fromBigInt(value));
  }

  get _maintainer(): Bytes {
    let value = this.get("_maintainer");
    return value.toBytes();
  }

  set _maintainer(value: Bytes) {
    this.set("_maintainer", Value.fromBytes(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _event(): string {
    let value = this.get("_event");
    return value.toString();
  }

  set _event(value: string) {
    this.set("_event", Value.fromString(value));
  }
}

export class PriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PriceUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceUpdated", id.toString(), this);
  }

  static load(id: string): PriceUpdated | null {
    return store.get("PriceUpdated", id) as PriceUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _caller(): Bytes {
    let value = this.get("_caller");
    return value.toBytes();
  }

  set _caller(value: Bytes) {
    this.set("_caller", Value.fromBytes(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _rate(): BigInt {
    let value = this.get("_rate");
    return value.toBigInt();
  }

  set _rate(value: BigInt) {
    this.set("_rate", Value.fromBigInt(value));
  }

  get _currency(): string {
    let value = this.get("_currency");
    return value.toString();
  }

  set _currency(value: string) {
    this.set("_currency", Value.fromString(value));
  }

  get _block(): BigInt {
    let value = this.get("_block");
    return value.toBigInt();
  }

  set _block(value: BigInt) {
    this.set("_block", Value.fromBigInt(value));
  }

  get _txHash(): Bytes {
    let value = this.get("_txHash");
    return value.toBytes();
  }

  set _txHash(value: Bytes) {
    this.set("_txHash", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _totalDebtAdded2key(): BigInt | null {
    let value = this.get("_totalDebtAdded2key");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtAdded2key(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtAdded2key");
    } else {
      this.set("_totalDebtAdded2key", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtRemoved2key(): BigInt | null {
    let value = this.get("_totalDebtRemoved2key");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtRemoved2key(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtRemoved2key");
    } else {
      this.set("_totalDebtRemoved2key", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtAddedDAI(): BigInt | null {
    let value = this.get("_totalDebtAddedDAI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtAddedDAI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtAddedDAI");
    } else {
      this.set("_totalDebtAddedDAI", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtRemovedDAI(): BigInt | null {
    let value = this.get("_totalDebtRemovedDAI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtRemovedDAI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtRemovedDAI");
    } else {
      this.set("_totalDebtRemovedDAI", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtAddedETHWEI(): BigInt | null {
    let value = this.get("_totalDebtAddedETHWEI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtAddedETHWEI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtAddedETHWEI");
    } else {
      this.set("_totalDebtAddedETHWEI", Value.fromBigInt(value as BigInt));
    }
  }

  get _totalDebtRemovedETHWEI(): BigInt | null {
    let value = this.get("_totalDebtRemovedETHWEI");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _totalDebtRemovedETHWEI(value: BigInt | null) {
    if (value === null) {
      this.unset("_totalDebtRemovedETHWEI");
    } else {
      this.set("_totalDebtRemovedETHWEI", Value.fromBigInt(value as BigInt));
    }
  }

  get _n_debtAdded(): i32 {
    let value = this.get("_n_debtAdded");
    return value.toI32();
  }

  set _n_debtAdded(value: i32) {
    this.set("_n_debtAdded", Value.fromI32(value));
  }

  get _n_debtRemoved(): i32 {
    let value = this.get("_n_debtRemoved");
    return value.toI32();
  }

  set _n_debtRemoved(value: i32) {
    this.set("_n_debtRemoved", Value.fromI32(value));
  }

  get _name(): string | null {
    let value = this.get("_name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _name(value: string | null) {
    if (value === null) {
      this.unset("_name");
    } else {
      this.set("_name", Value.fromString(value as string));
    }
  }

  get _fullName(): string | null {
    let value = this.get("_fullName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _fullName(value: string | null) {
    if (value === null) {
      this.unset("_fullName");
    } else {
      this.set("_fullName", Value.fromString(value as string));
    }
  }

  get _email(): string | null {
    let value = this.get("_email");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _email(value: string | null) {
    if (value === null) {
      this.unset("_email");
    } else {
      this.set("_email", Value.fromString(value as string));
    }
  }

  get _walletName(): string | null {
    let value = this.get("_walletName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _walletName(value: string | null) {
    if (value === null) {
      this.unset("_walletName");
    } else {
      this.set("_walletName", Value.fromString(value as string));
    }
  }

  get _web3Address(): Bytes | null {
    let value = this.get("_web3Address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _web3Address(value: Bytes | null) {
    if (value === null) {
      this.unset("_web3Address");
    } else {
      this.set("_web3Address", Value.fromBytes(value as Bytes));
    }
  }

  get _campaign_owner(): Array<string> {
    let value = this.get("_campaign_owner");
    return value.toStringArray();
  }

  set _campaign_owner(value: Array<string>) {
    this.set("_campaign_owner", Value.fromStringArray(value));
  }

  get _campaign_moderator(): Array<string> {
    let value = this.get("_campaign_moderator");
    return value.toStringArray();
  }

  set _campaign_moderator(value: Array<string>) {
    this.set("_campaign_moderator", Value.fromStringArray(value));
  }

  get _conversions(): Array<string> {
    let value = this.get("_conversions");
    return value.toStringArray();
  }

  set _conversions(value: Array<string>) {
    this.set("_conversions", Value.fromStringArray(value));
  }

  get _fees(): Array<string> {
    let value = this.get("_fees");
    return value.toStringArray();
  }

  set _fees(value: Array<string>) {
    this.set("_fees", Value.fromStringArray(value));
  }

  get _rewards(): Array<string> {
    let value = this.get("_rewards");
    return value.toStringArray();
  }

  set _rewards(value: Array<string>) {
    this.set("_rewards", Value.fromStringArray(value));
  }

  get _total_rewards_amount(): BigInt | null {
    let value = this.get("_total_rewards_amount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _total_rewards_amount(value: BigInt | null) {
    if (value === null) {
      this.unset("_total_rewards_amount");
    } else {
      this.set("_total_rewards_amount", Value.fromBigInt(value as BigInt));
    }
  }

  get _n_rewards(): i32 {
    let value = this.get("_n_rewards");
    return value.toI32();
  }

  set _n_rewards(value: i32) {
    this.set("_n_rewards", Value.fromI32(value));
  }

  get _n_conversions(): i32 {
    let value = this.get("_n_conversions");
    return value.toI32();
  }

  set _n_conversions(value: i32) {
    this.set("_n_conversions", Value.fromI32(value));
  }

  get _total_conversions_amount(): BigInt | null {
    let value = this.get("_total_conversions_amount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _total_conversions_amount(value: BigInt | null) {
    if (value === null) {
      this.unset("_total_conversions_amount");
    } else {
      this.set("_total_conversions_amount", Value.fromBigInt(value as BigInt));
    }
  }

  get _n_conversions_rejected(): i32 {
    let value = this.get("_n_conversions_rejected");
    return value.toI32();
  }

  set _n_conversions_rejected(value: i32) {
    this.set("_n_conversions_rejected", Value.fromI32(value));
  }

  get _n_conversions_approved(): i32 {
    let value = this.get("_n_conversions_approved");
    return value.toI32();
  }

  set _n_conversions_approved(value: i32) {
    this.set("_n_conversions_approved", Value.fromI32(value));
  }

  get _n_conversions_executed(): i32 {
    let value = this.get("_n_conversions_executed");
    return value.toI32();
  }

  set _n_conversions_executed(value: i32) {
    this.set("_n_conversions_executed", Value.fromI32(value));
  }

  get _contractorMonetaryRep(): BigInt | null {
    let value = this.get("_contractorMonetaryRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorMonetaryRep");
    } else {
      this.set("_contractorMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _contractorBudgetRep(): BigInt | null {
    let value = this.get("_contractorBudgetRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorBudgetRep");
    } else {
      this.set("_contractorBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _contractorFeedbackRep(): BigInt | null {
    let value = this.get("_contractorFeedbackRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorFeedbackRep");
    } else {
      this.set("_contractorFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerMonetaryRep(): BigInt | null {
    let value = this.get("_referrerMonetaryRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerMonetaryRep");
    } else {
      this.set("_referrerMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerBudgetRep(): BigInt | null {
    let value = this.get("_referrerBudgetRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerBudgetRep");
    } else {
      this.set("_referrerBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerFeedbackRep(): BigInt | null {
    let value = this.get("_referrerFeedbackRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerFeedbackRep");
    } else {
      this.set("_referrerFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterMonetaryRep(): BigInt | null {
    let value = this.get("_converterMonetaryRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterMonetaryRep");
    } else {
      this.set("_converterMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterBudgetRep(): BigInt | null {
    let value = this.get("_converterBudgetRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterBudgetRep");
    } else {
      this.set("_converterBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterFeedbackRep(): BigInt | null {
    let value = this.get("_converterFeedbackRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterFeedbackRep");
    } else {
      this.set("_converterFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _event(): string | null {
    let value = this.get("_event");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _event(value: string | null) {
    if (value === null) {
      this.unset("_event");
    } else {
      this.set("_event", Value.fromString(value as string));
    }
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Event entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Event entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Event", id.toString(), this);
  }

  static load(id: string): Event | null {
    return store.get("Event", id) as Event | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _address(): Bytes {
    let value = this.get("_address");
    return value.toBytes();
  }

  set _address(value: Bytes) {
    this.set("_address", Value.fromBytes(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _tx_hash(): string {
    let value = this.get("_tx_hash");
    return value.toString();
  }

  set _tx_hash(value: string) {
    this.set("_tx_hash", Value.fromString(value));
  }

  get _type(): string {
    let value = this.get("_type");
    return value.toString();
  }

  set _type(value: string) {
    this.set("_type", Value.fromString(value));
  }

  get _notes(): string | null {
    let value = this.get("_notes");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _notes(value: string | null) {
    if (value === null) {
      this.unset("_notes");
    } else {
      this.set("_notes", Value.fromString(value as string));
    }
  }
}

export class Join extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Join entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Join entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Join", id.toString(), this);
  }

  static load(id: string): Join | null {
    return store.get("Join", id) as Join | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _from(): string {
    let value = this.get("_from");
    return value.toString();
  }

  set _from(value: string) {
    this.set("_from", Value.fromString(value));
  }

  get _to(): string {
    let value = this.get("_to");
    return value.toString();
  }

  set _to(value: string) {
    this.set("_to", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reward", id.toString(), this);
  }

  static load(id: string): Reward | null {
    return store.get("Reward", id) as Reward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _user(): string {
    let value = this.get("_user");
    return value.toString();
  }

  set _user(value: string) {
    this.set("_user", Value.fromString(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class ConCampUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ConCampUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConCampUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConCampUser", id.toString(), this);
  }

  static load(id: string): ConCampUser | null {
    return store.get("ConCampUser", id) as ConCampUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _conversions(): Array<BigInt> {
    let value = this.get("_conversions");
    return value.toBigIntArray();
  }

  set _conversions(value: Array<BigInt>) {
    this.set("_conversions", Value.fromBigIntArray(value));
  }
}

export class Rejected extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Rejected entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Rejected entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Rejected", id.toString(), this);
  }

  static load(id: string): Rejected | null {
    return store.get("Rejected", id) as Rejected | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): Bytes {
    let value = this.get("_campaign");
    return value.toBytes();
  }

  set _campaign(value: Bytes) {
    this.set("_campaign", Value.fromBytes(value));
  }

  get _converter(): Bytes {
    let value = this.get("_converter");
    return value.toBytes();
  }

  set _converter(value: Bytes) {
    this.set("_converter", Value.fromBytes(value));
  }
}

export class Web3ToUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Web3ToUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Web3ToUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Web3ToUser", id.toString(), this);
  }

  static load(id: string): Web3ToUser | null {
    return store.get("Web3ToUser", id) as Web3ToUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _user(): string {
    let value = this.get("_user");
    return value.toString();
  }

  set _user(value: string) {
    this.set("_user", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Debug extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Debug entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Debug entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Debug", id.toString(), this);
  }

  static load(id: string): Debug | null {
    return store.get("Debug", id) as Debug | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _info(): string {
    let value = this.get("_info");
    return value.toString();
  }

  set _info(value: string) {
    this.set("_info", Value.fromString(value));
  }
}

export class Reputation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reputation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reputation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reputation", id.toString(), this);
  }

  static load(id: string): Reputation | null {
    return store.get("Reputation", id) as Reputation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _user(): string {
    let value = this.get("_user");
    return value.toString();
  }

  set _user(value: string) {
    this.set("_user", Value.fromString(value));
  }

  get _type(): string {
    let value = this.get("_type");
    return value.toString();
  }

  set _type(value: string) {
    this.set("_type", Value.fromString(value));
  }

  get _role(): string {
    let value = this.get("_role");
    return value.toString();
  }

  set _role(value: string) {
    this.set("_role", Value.fromString(value));
  }

  get _pointsWei(): BigInt {
    let value = this.get("_pointsWei");
    return value.toBigInt();
  }

  set _pointsWei(value: BigInt) {
    this.set("_pointsWei", Value.fromBigInt(value));
  }
}

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Fee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Fee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Fee", id.toString(), this);
  }

  static load(id: string): Fee | null {
    return store.get("Fee", id) as Fee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _user(): string | null {
    let value = this.get("_user");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _user(value: string | null) {
    if (value === null) {
      this.unset("_user");
    } else {
      this.set("_user", Value.fromString(value as string));
    }
  }

  get _addition(): boolean {
    let value = this.get("_addition");
    return value.toBoolean();
  }

  set _addition(value: boolean) {
    this.set("_addition", Value.fromBoolean(value));
  }

  get _weiAmount(): BigInt | null {
    let value = this.get("_weiAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _weiAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("_weiAmount");
    } else {
      this.set("_weiAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get _tokens(): BigInt | null {
    let value = this.get("_tokens");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _tokens(value: BigInt | null) {
    if (value === null) {
      this.unset("_tokens");
    } else {
      this.set("_tokens", Value.fromBigInt(value as BigInt));
    }
  }

  get _currency(): string {
    let value = this.get("_currency");
    return value.toString();
  }

  set _currency(value: string) {
    this.set("_currency", Value.fromString(value));
  }

  get _campaign(): string | null {
    let value = this.get("_campaign");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _campaign(value: string | null) {
    if (value === null) {
      this.unset("_campaign");
    } else {
      this.set("_campaign", Value.fromString(value as string));
    }
  }

  get _conversion(): string | null {
    let value = this.get("_conversion");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _conversion(value: string | null) {
    if (value === null) {
      this.unset("_conversion");
    } else {
      this.set("_conversion", Value.fromString(value as string));
    }
  }

  get _type(): string | null {
    let value = this.get("_type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _type(value: string | null) {
    if (value === null) {
      this.unset("_type");
    } else {
      this.set("_type", Value.fromString(value as string));
    }
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _amountAdded(): BigInt | null {
    let value = this.get("_amountAdded");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _amountAdded(value: BigInt | null) {
    if (value === null) {
      this.unset("_amountAdded");
    } else {
      this.set("_amountAdded", Value.fromBigInt(value as BigInt));
    }
  }

  get _amountBurned(): BigInt | null {
    let value = this.get("_amountBurned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _amountBurned(value: BigInt | null) {
    if (value === null) {
      this.unset("_amountBurned");
    } else {
      this.set("_amountBurned", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Holder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Holder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Holder", id.toString(), this);
  }

  static load(id: string): Holder | null {
    return store.get("Holder", id) as Holder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _twokeyBalance(): BigInt | null {
    let value = this.get("_twokeyBalance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _twokeyBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("_twokeyBalance");
    } else {
      this.set("_twokeyBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get _twokeyDaiBalance(): BigInt | null {
    let value = this.get("_twokeyDaiBalance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _twokeyDaiBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("_twokeyDaiBalance");
    } else {
      this.set("_twokeyDaiBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get _twokeyEthBalance(): BigInt | null {
    let value = this.get("_twokeyEthBalance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _twokeyEthBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("_twokeyEthBalance");
    } else {
      this.set("_twokeyEthBalance", Value.fromBigInt(value as BigInt));
    }
  }
}

export class TokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenTransfer", id.toString(), this);
  }

  static load(id: string): TokenTransfer | null {
    return store.get("TokenTransfer", id) as TokenTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _token(): string {
    let value = this.get("_token");
    return value.toString();
  }

  set _token(value: string) {
    this.set("_token", Value.fromString(value));
  }

  get _sender(): Bytes {
    let value = this.get("_sender");
    return value.toBytes();
  }

  set _sender(value: Bytes) {
    this.set("_sender", Value.fromBytes(value));
  }

  get _receiver(): Bytes {
    let value = this.get("_receiver");
    return value.toBytes();
  }

  set _receiver(value: Bytes) {
    this.set("_receiver", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _block(): BigInt {
    let value = this.get("_block");
    return value.toBigInt();
  }

  set _block(value: BigInt) {
    this.set("_block", Value.fromBigInt(value));
  }

  get _timestamp(): BigInt {
    let value = this.get("_timestamp");
    return value.toBigInt();
  }

  set _timestamp(value: BigInt) {
    this.set("_timestamp", Value.fromBigInt(value));
  }

  get _transaction(): Bytes {
    let value = this.get("_transaction");
    return value.toBytes();
  }

  set _transaction(value: Bytes) {
    this.set("_transaction", Value.fromBytes(value));
  }
}
