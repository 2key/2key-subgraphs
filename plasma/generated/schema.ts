// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Conversion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Conversion entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Conversion entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Conversion", id.toString(), this);
  }

  static load(id: string): Conversion | null {
    return store.get("Conversion", id) as Conversion | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaignType(): string | null {
    let value = this.get("_campaignType");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _campaignType(value: string | null) {
    if (value === null) {
      this.unset("_campaignType");
    } else {
      this.set("_campaignType", Value.fromString(value as string));
    }
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _status(): string | null {
    let value = this.get("_status");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _status(value: string | null) {
    if (value === null) {
      this.unset("_status");
    } else {
      this.set("_status", Value.fromString(value as string));
    }
  }

  get _campaign(): string | null {
    let value = this.get("_campaign");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _campaign(value: string | null) {
    if (value === null) {
      this.unset("_campaign");
    } else {
      this.set("_campaign", Value.fromString(value as string));
    }
  }

  get _participate(): string | null {
    let value = this.get("_participate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _participate(value: string | null) {
    if (value === null) {
      this.unset("_participate");
    } else {
      this.set("_participate", Value.fromString(value as string));
    }
  }

  get _fiatAmountSpent(): BigInt | null {
    let value = this.get("_fiatAmountSpent");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _fiatAmountSpent(value: BigInt | null) {
    if (value === null) {
      this.unset("_fiatAmountSpent");
    } else {
      this.set("_fiatAmountSpent", Value.fromBigInt(value as BigInt));
    }
  }

  get _ethAmountSpent(): BigInt | null {
    let value = this.get("_ethAmountSpent");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _ethAmountSpent(value: BigInt | null) {
    if (value === null) {
      this.unset("_ethAmountSpent");
    } else {
      this.set("_ethAmountSpent", Value.fromBigInt(value as BigInt));
    }
  }

  get _tokens(): BigInt | null {
    let value = this.get("_tokens");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _tokens(value: BigInt | null) {
    if (value === null) {
      this.unset("_tokens");
    } else {
      this.set("_tokens", Value.fromBigInt(value as BigInt));
    }
  }

  get _rejected_status_code(): i32 {
    let value = this.get("_rejected_status_code");
    return value.toI32();
  }

  set _rejected_status_code(value: i32) {
    this.set("_rejected_status_code", Value.fromI32(value));
  }

  get _rejected_at(): BigInt | null {
    let value = this.get("_rejected_at");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _rejected_at(value: BigInt | null) {
    if (value === null) {
      this.unset("_rejected_at");
    } else {
      this.set("_rejected_at", Value.fromBigInt(value as BigInt));
    }
  }

  get _isFiatConversion(): boolean {
    let value = this.get("_isFiatConversion");
    return value.toBoolean();
  }

  set _isFiatConversion(value: boolean) {
    this.set("_isFiatConversion", Value.fromBoolean(value));
  }

  get _refundable(): boolean {
    let value = this.get("_refundable");
    return value.toBoolean();
  }

  set _refundable(value: boolean) {
    this.set("_refundable", Value.fromBoolean(value));
  }

  get _paid(): boolean {
    let value = this.get("_paid");
    return value.toBoolean();
  }

  set _paid(value: boolean) {
    this.set("_paid", Value.fromBoolean(value));
  }

  get _setPaid(): boolean {
    let value = this.get("_setPaid");
    return value.toBoolean();
  }

  set _setPaid(value: boolean) {
    this.set("_setPaid", Value.fromBoolean(value));
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _conversionId(): BigInt | null {
    let value = this.get("_conversionId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _conversionId(value: BigInt | null) {
    if (value === null) {
      this.unset("_conversionId");
    } else {
      this.set("_conversionId", Value.fromBigInt(value as BigInt));
    }
  }

  get _timeStamp(): BigInt | null {
    let value = this.get("_timeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _timeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_timeStamp");
    } else {
      this.set("_timeStamp", Value.fromBigInt(value as BigInt));
    }
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Debug extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Debug entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Debug entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Debug", id.toString(), this);
  }

  static load(id: string): Debug | null {
    return store.get("Debug", id) as Debug | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _info(): string {
    let value = this.get("_info");
    return value.toString();
  }

  set _info(value: string) {
    this.set("_info", Value.fromString(value));
  }
}

export class Price extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Price entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Price entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Price", id.toString(), this);
  }

  static load(id: string): Price | null {
    return store.get("Price", id) as Price | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _currency(): string | null {
    let value = this.get("_currency");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _currency(value: string | null) {
    if (value === null) {
      this.unset("_currency");
    } else {
      this.set("_currency", Value.fromString(value as string));
    }
  }

  get _rate(): BigInt {
    let value = this.get("_rate");
    return value.toBigInt();
  }

  set _rate(value: BigInt) {
    this.set("_rate", Value.fromBigInt(value));
  }

  get _updater(): string {
    let value = this.get("_updater");
    return value.toString();
  }

  set _updater(value: string) {
    this.set("_updater", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UserReg extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserReg entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserReg entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserReg", id.toString(), this);
  }

  static load(id: string): UserReg | null {
    return store.get("UserReg", id) as UserReg | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _name(): string | null {
    let value = this.get("_name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _name(value: string | null) {
    if (value === null) {
      this.unset("_name");
    } else {
      this.set("_name", Value.fromString(value as string));
    }
  }

  get _fullName(): string | null {
    let value = this.get("_fullName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _fullName(value: string | null) {
    if (value === null) {
      this.unset("_fullName");
    } else {
      this.set("_fullName", Value.fromString(value as string));
    }
  }

  get _email(): string | null {
    let value = this.get("_email");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _email(value: string | null) {
    if (value === null) {
      this.unset("_email");
    } else {
      this.set("_email", Value.fromString(value as string));
    }
  }

  get _walletName(): string | null {
    let value = this.get("_walletName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _walletName(value: string | null) {
    if (value === null) {
      this.unset("_walletName");
    } else {
      this.set("_walletName", Value.fromString(value as string));
    }
  }

  get _web3(): Bytes | null {
    let value = this.get("_web3");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _web3(value: Bytes | null) {
    if (value === null) {
      this.unset("_web3");
    } else {
      this.set("_web3", Value.fromBytes(value as Bytes));
    }
  }

  get _address(): Bytes | null {
    let value = this.get("_address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _address(value: Bytes | null) {
    if (value === null) {
      this.unset("_address");
    } else {
      this.set("_address", Value.fromBytes(value as Bytes));
    }
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _tx_hash(): string | null {
    let value = this.get("_tx_hash");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _tx_hash(value: string | null) {
    if (value === null) {
      this.unset("_tx_hash");
    } else {
      this.set("_tx_hash", Value.fromString(value as string));
    }
  }

  get _updatedTimeStamp(): BigInt | null {
    let value = this.get("_updatedTimeStamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _updatedTimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_updatedTimeStamp");
    } else {
      this.set("_updatedTimeStamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Campaign entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Campaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Campaign", id.toString(), this);
  }

  static load(id: string): Campaign | null {
    return store.get("Campaign", id) as Campaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _owner(): string | null {
    let value = this.get("_owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _owner(value: string | null) {
    if (value === null) {
      this.unset("_owner");
    } else {
      this.set("_owner", Value.fromString(value as string));
    }
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _type(): string | null {
    let value = this.get("_type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _type(value: string | null) {
    if (value === null) {
      this.unset("_type");
    } else {
      this.set("_type", Value.fromString(value as string));
    }
  }

  get _n_conversions(): i32 {
    let value = this.get("_n_conversions");
    return value.toI32();
  }

  set _n_conversions(value: i32) {
    this.set("_n_conversions", Value.fromI32(value));
  }

  get _n_conversions_executed(): i32 {
    let value = this.get("_n_conversions_executed");
    return value.toI32();
  }

  set _n_conversions_executed(value: i32) {
    this.set("_n_conversions_executed", Value.fromI32(value));
  }

  get _n_unique_converters(): i32 {
    let value = this.get("_n_unique_converters");
    return value.toI32();
  }

  set _n_unique_converters(value: i32) {
    this.set("_n_unique_converters", Value.fromI32(value));
  }

  get _n_conversions_approved(): i32 {
    let value = this.get("_n_conversions_approved");
    return value.toI32();
  }

  set _n_conversions_approved(value: i32) {
    this.set("_n_conversions_approved", Value.fromI32(value));
  }

  get _n_forwarded(): i32 {
    let value = this.get("_n_forwarded");
    return value.toI32();
  }

  set _n_forwarded(value: i32) {
    this.set("_n_forwarded", Value.fromI32(value));
  }

  get _n_referred(): i32 {
    let value = this.get("_n_referred");
    return value.toI32();
  }

  set _n_referred(value: i32) {
    this.set("_n_referred", Value.fromI32(value));
  }

  get _n_conversions_paid(): i32 {
    let value = this.get("_n_conversions_paid");
    return value.toI32();
  }

  set _n_conversions_paid(value: i32) {
    this.set("_n_conversions_paid", Value.fromI32(value));
  }

  get _n_conversions_unpaid(): i32 {
    let value = this.get("_n_conversions_unpaid");
    return value.toI32();
  }

  set _n_conversions_unpaid(value: i32) {
    this.set("_n_conversions_unpaid", Value.fromI32(value));
  }

  get _n_conversions_rejected(): i32 {
    let value = this.get("_n_conversions_rejected");
    return value.toI32();
  }

  set _n_conversions_rejected(value: i32) {
    this.set("_n_conversions_rejected", Value.fromI32(value));
  }

  get _converters_addresses(): Array<string> | null {
    let value = this.get("_converters_addresses");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _converters_addresses(value: Array<string> | null) {
    if (value === null) {
      this.unset("_converters_addresses");
    } else {
      this.set(
        "_converters_addresses",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _plasmaAddress(): Bytes | null {
    let value = this.get("_plasmaAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _plasmaAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("_plasmaAddress");
    } else {
      this.set("_plasmaAddress", Value.fromBytes(value as Bytes));
    }
  }

  get _n_visits(): i32 {
    let value = this.get("_n_visits");
    return value.toI32();
  }

  set _n_visits(value: i32) {
    this.set("_n_visits", Value.fromI32(value));
  }

  get _n_joins(): i32 {
    let value = this.get("_n_joins");
    return value.toI32();
  }

  set _n_joins(value: i32) {
    this.set("_n_joins", Value.fromI32(value));
  }

  get _plasmaRootNode(): string | null {
    let value = this.get("_plasmaRootNode");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _plasmaRootNode(value: string | null) {
    if (value === null) {
      this.unset("_plasmaRootNode");
    } else {
      this.set("_plasmaRootNode", Value.fromString(value as string));
    }
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt {
    let value = this.get("_updatedTimeStamp");
    return value.toBigInt();
  }

  set _updatedTimeStamp(value: BigInt) {
    this.set("_updatedTimeStamp", Value.fromBigInt(value));
  }

  get _conversions(): Array<string> | null {
    let value = this.get("_conversions");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _conversions(value: Array<string> | null) {
    if (value === null) {
      this.unset("_conversions");
    } else {
      this.set("_conversions", Value.fromStringArray(value as Array<string>));
    }
  }

  get _visitors(): Array<string> | null {
    let value = this.get("_visitors");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _visitors(value: Array<string> | null) {
    if (value === null) {
      this.unset("_visitors");
    } else {
      this.set("_visitors", Value.fromStringArray(value as Array<string>));
    }
  }

  get _joins(): Array<string> | null {
    let value = this.get("_joins");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _joins(value: Array<string> | null) {
    if (value === null) {
      this.unset("_joins");
    } else {
      this.set("_joins", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Join extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Join entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Join entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Join", id.toString(), this);
  }

  static load(id: string): Join | null {
    return store.get("Join", id) as Join | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _referrer(): string {
    let value = this.get("_referrer");
    return value.toString();
  }

  set _referrer(value: string) {
    this.set("_referrer", Value.fromString(value));
  }

  get _visitor(): string {
    let value = this.get("_visitor");
    return value.toString();
  }

  set _visitor(value: string) {
    this.set("_visitor", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }
}

export class JoinEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JoinEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JoinEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JoinEvent", id.toString(), this);
  }

  static load(id: string): JoinEvent | null {
    return store.get("JoinEvent", id) as JoinEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _referrer(): string {
    let value = this.get("_referrer");
    return value.toString();
  }

  set _referrer(value: string) {
    this.set("_referrer", Value.fromString(value));
  }

  get _visitor(): string {
    let value = this.get("_visitor");
    return value.toString();
  }

  set _visitor(value: string) {
    this.set("_visitor", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }
}

export class Meta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Meta entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Meta entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Meta", id.toString(), this);
  }

  static load(id: string): Meta | null {
    return store.get("Meta", id) as Meta | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _conversionsExecuted(): i32 {
    let value = this.get("_conversionsExecuted");
    return value.toI32();
  }

  set _conversionsExecuted(value: i32) {
    this.set("_conversionsExecuted", Value.fromI32(value));
  }

  get _n_conversions_rejected(): i32 {
    let value = this.get("_n_conversions_rejected");
    return value.toI32();
  }

  set _n_conversions_rejected(value: i32) {
    this.set("_n_conversions_rejected", Value.fromI32(value));
  }

  get _n_ppcCampaignsCreated(): i32 {
    let value = this.get("_n_ppcCampaignsCreated");
    return value.toI32();
  }

  set _n_ppcCampaignsCreated(value: i32) {
    this.set("_n_ppcCampaignsCreated", Value.fromI32(value));
  }

  get _n_clicks(): i32 {
    let value = this.get("_n_clicks");
    return value.toI32();
  }

  set _n_clicks(value: i32) {
    this.set("_n_clicks", Value.fromI32(value));
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _contracts(): Array<Bytes> | null {
    let value = this.get("_contracts");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set _contracts(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("_contracts");
    } else {
      this.set("_contracts", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _visitCounter(): i32 {
    let value = this.get("_visitCounter");
    return value.toI32();
  }

  set _visitCounter(value: i32) {
    this.set("_visitCounter", Value.fromI32(value));
  }

  get _visitCounterPpc(): i32 {
    let value = this.get("_visitCounterPpc");
    return value.toI32();
  }

  set _visitCounterPpc(value: i32) {
    this.set("_visitCounterPpc", Value.fromI32(value));
  }

  get _n_forwarded(): i32 {
    let value = this.get("_n_forwarded");
    return value.toI32();
  }

  set _n_forwarded(value: i32) {
    this.set("_n_forwarded", Value.fromI32(value));
  }

  get _n_referred(): i32 {
    let value = this.get("_n_referred");
    return value.toI32();
  }

  set _n_referred(value: i32) {
    this.set("_n_referred", Value.fromI32(value));
  }

  get _n_referredPpc(): i32 {
    let value = this.get("_n_referredPpc");
    return value.toI32();
  }

  set _n_referredPpc(value: i32) {
    this.set("_n_referredPpc", Value.fromI32(value));
  }

  get _joinsCounter(): i32 {
    let value = this.get("_joinsCounter");
    return value.toI32();
  }

  set _joinsCounter(value: i32) {
    this.set("_joinsCounter", Value.fromI32(value));
  }

  get _plasmaToHandleCounter(): i32 {
    let value = this.get("_plasmaToHandleCounter");
    return value.toI32();
  }

  set _plasmaToHandleCounter(value: i32) {
    this.set("_plasmaToHandleCounter", Value.fromI32(value));
  }

  get _plasmaToEthereumCounter(): i32 {
    let value = this.get("_plasmaToEthereumCounter");
    return value.toI32();
  }

  set _plasmaToEthereumCounter(value: i32) {
    this.set("_plasmaToEthereumCounter", Value.fromI32(value));
  }

  get _handleChanged(): i32 {
    let value = this.get("_handleChanged");
    return value.toI32();
  }

  set _handleChanged(value: i32) {
    this.set("_handleChanged", Value.fromI32(value));
  }

  get _plasmaWeb3Mapping(): i32 {
    let value = this.get("_plasmaWeb3Mapping");
    return value.toI32();
  }

  set _plasmaWeb3Mapping(value: i32) {
    this.set("_plasmaWeb3Mapping", Value.fromI32(value));
  }

  get _n_conversions(): i32 {
    let value = this.get("_n_conversions");
    return value.toI32();
  }

  set _n_conversions(value: i32) {
    this.set("_n_conversions", Value.fromI32(value));
  }

  get _n_conversions_paid(): i32 {
    let value = this.get("_n_conversions_paid");
    return value.toI32();
  }

  set _n_conversions_paid(value: i32) {
    this.set("_n_conversions_paid", Value.fromI32(value));
  }

  get _n_conversions_unpaid(): i32 {
    let value = this.get("_n_conversions_unpaid");
    return value.toI32();
  }

  set _n_conversions_unpaid(value: i32) {
    this.set("_n_conversions_unpaid", Value.fromI32(value));
  }

  get _n_campaigns(): i32 {
    let value = this.get("_n_campaigns");
    return value.toI32();
  }

  set _n_campaigns(value: i32) {
    this.set("_n_campaigns", Value.fromI32(value));
  }

  get _n_feedbackEvents(): i32 {
    let value = this.get("_n_feedbackEvents");
    return value.toI32();
  }

  set _n_feedbackEvents(value: i32) {
    this.set("_n_feedbackEvents", Value.fromI32(value));
  }

  get _n_reputationEvents(): i32 {
    let value = this.get("_n_reputationEvents");
    return value.toI32();
  }

  set _n_reputationEvents(value: i32) {
    this.set("_n_reputationEvents", Value.fromI32(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedAt(): BigInt {
    let value = this.get("_updatedAt");
    return value.toBigInt();
  }

  set _updatedAt(value: BigInt) {
    this.set("_updatedAt", Value.fromBigInt(value));
  }
}

export class PlasmaToEthereumMappingEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PlasmaToEthereumMappingEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PlasmaToEthereumMappingEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PlasmaToEthereumMappingEvent", id.toString(), this);
  }

  static load(id: string): PlasmaToEthereumMappingEvent | null {
    return store.get(
      "PlasmaToEthereumMappingEvent",
      id
    ) as PlasmaToEthereumMappingEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _plasma(): string {
    let value = this.get("_plasma");
    return value.toString();
  }

  set _plasma(value: string) {
    this.set("_plasma", Value.fromString(value));
  }

  get _ethereum(): Bytes {
    let value = this.get("_ethereum");
    return value.toBytes();
  }

  set _ethereum(value: Bytes) {
    this.set("_ethereum", Value.fromBytes(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }
}

export class Test extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Test entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Test entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Test", id.toString(), this);
  }

  static load(id: string): Test | null {
    return store.get("Test", id) as Test | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _address(): Bytes {
    let value = this.get("_address");
    return value.toBytes();
  }

  set _address(value: Bytes) {
    this.set("_address", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _web3Address(): Bytes | null {
    let value = this.get("_web3Address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _web3Address(value: Bytes | null) {
    if (value === null) {
      this.unset("_web3Address");
    } else {
      this.set("_web3Address", Value.fromBytes(value as Bytes));
    }
  }

  get _handle(): string | null {
    let value = this.get("_handle");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _handle(value: string | null) {
    if (value === null) {
      this.unset("_handle");
    } else {
      this.set("_handle", Value.fromString(value as string));
    }
  }

  get _n_campaigns(): i32 {
    let value = this.get("_n_campaigns");
    return value.toI32();
  }

  set _n_campaigns(value: i32) {
    this.set("_n_campaigns", Value.fromI32(value));
  }

  get _n_conversions(): i32 {
    let value = this.get("_n_conversions");
    return value.toI32();
  }

  set _n_conversions(value: i32) {
    this.set("_n_conversions", Value.fromI32(value));
  }

  get _n_joins(): i32 {
    let value = this.get("_n_joins");
    return value.toI32();
  }

  set _n_joins(value: i32) {
    this.set("_n_joins", Value.fromI32(value));
  }

  get _n_conversions_paid(): i32 {
    let value = this.get("_n_conversions_paid");
    return value.toI32();
  }

  set _n_conversions_paid(value: i32) {
    this.set("_n_conversions_paid", Value.fromI32(value));
  }

  get _n_conversions_unpaid(): i32 {
    let value = this.get("_n_conversions_unpaid");
    return value.toI32();
  }

  set _n_conversions_unpaid(value: i32) {
    this.set("_n_conversions_unpaid", Value.fromI32(value));
  }

  get _contractorMonetaryRep(): BigInt | null {
    let value = this.get("_contractorMonetaryRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorMonetaryRep");
    } else {
      this.set("_contractorMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _contractorBudgetRep(): BigInt | null {
    let value = this.get("_contractorBudgetRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorBudgetRep");
    } else {
      this.set("_contractorBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _contractorFeedbackRep(): BigInt | null {
    let value = this.get("_contractorFeedbackRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorFeedbackRep");
    } else {
      this.set("_contractorFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerMonetaryRep(): BigInt | null {
    let value = this.get("_referrerMonetaryRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerMonetaryRep");
    } else {
      this.set("_referrerMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerBudgetRep(): BigInt | null {
    let value = this.get("_referrerBudgetRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerBudgetRep");
    } else {
      this.set("_referrerBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerFeedbackRep(): BigInt | null {
    let value = this.get("_referrerFeedbackRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerFeedbackRep");
    } else {
      this.set("_referrerFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterMonetaryRep(): BigInt | null {
    let value = this.get("_converterMonetaryRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterMonetaryRep");
    } else {
      this.set("_converterMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterBudgetRep(): BigInt | null {
    let value = this.get("_converterBudgetRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterBudgetRep");
    } else {
      this.set("_converterBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterFeedbackRep(): BigInt | null {
    let value = this.get("_converterFeedbackRep");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterFeedbackRep");
    } else {
      this.set("_converterFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _visits_referrer(): Array<string> | null {
    let value = this.get("_visits_referrer");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _visits_referrer(value: Array<string> | null) {
    if (value === null) {
      this.unset("_visits_referrer");
    } else {
      this.set(
        "_visits_referrer",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get _visits_visitor(): Array<string> | null {
    let value = this.get("_visits_visitor");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _visits_visitor(value: Array<string> | null) {
    if (value === null) {
      this.unset("_visits_visitor");
    } else {
      this.set(
        "_visits_visitor",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get _joins_referrer(): Array<string> | null {
    let value = this.get("_joins_referrer");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _joins_referrer(value: Array<string> | null) {
    if (value === null) {
      this.unset("_joins_referrer");
    } else {
      this.set(
        "_joins_referrer",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get _joins_visitor(): Array<string> | null {
    let value = this.get("_joins_visitor");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _joins_visitor(value: Array<string> | null) {
    if (value === null) {
      this.unset("_joins_visitor");
    } else {
      this.set("_joins_visitor", Value.fromStringArray(value as Array<string>));
    }
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedAt(): BigInt {
    let value = this.get("_updatedAt");
    return value.toBigInt();
  }

  set _updatedAt(value: BigInt) {
    this.set("_updatedAt", Value.fromBigInt(value));
  }
}

export class ForwardedByCampaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ForwardedByCampaign entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ForwardedByCampaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ForwardedByCampaign", id.toString(), this);
  }

  static load(id: string): ForwardedByCampaign | null {
    return store.get("ForwardedByCampaign", id) as ForwardedByCampaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _exists(): i32 {
    let value = this.get("_exists");
    return value.toI32();
  }

  set _exists(value: i32) {
    this.set("_exists", Value.fromI32(value));
  }
}

export class Reputation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reputation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reputation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reputation", id.toString(), this);
  }

  static load(id: string): Reputation | null {
    return store.get("Reputation", id) as Reputation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _user(): string {
    let value = this.get("_user");
    return value.toString();
  }

  set _user(value: string) {
    this.set("_user", Value.fromString(value));
  }

  get _type(): string {
    let value = this.get("_type");
    return value.toString();
  }

  set _type(value: string) {
    this.set("_type", Value.fromString(value));
  }

  get _role(): string {
    let value = this.get("_role");
    return value.toString();
  }

  set _role(value: string) {
    this.set("_role", Value.fromString(value));
  }

  get _pointsWei(): BigInt {
    let value = this.get("_pointsWei");
    return value.toBigInt();
  }

  set _pointsWei(value: BigInt) {
    this.set("_pointsWei", Value.fromBigInt(value));
  }
}

export class Feedback extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Feedback entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Feedback entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Feedback", id.toString(), this);
  }

  static load(id: string): Feedback | null {
    return store.get("Feedback", id) as Feedback | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _user(): string {
    let value = this.get("_user");
    return value.toString();
  }

  set _user(value: string) {
    this.set("_user", Value.fromString(value));
  }

  get _type(): string {
    let value = this.get("_type");
    return value.toString();
  }

  set _type(value: string) {
    this.set("_type", Value.fromString(value));
  }

  get _role(): string {
    let value = this.get("_role");
    return value.toString();
  }

  set _role(value: string) {
    this.set("_role", Value.fromString(value));
  }

  get _pointsWei(): BigInt {
    let value = this.get("_pointsWei");
    return value.toBigInt();
  }

  set _pointsWei(value: BigInt) {
    this.set("_pointsWei", Value.fromBigInt(value));
  }

  get _reporter(): string {
    let value = this.get("_reporter");
    return value.toString();
  }

  set _reporter(value: string) {
    this.set("_reporter", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }
}

export class Visit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Visit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Visit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Visit", id.toString(), this);
  }

  static load(id: string): Visit | null {
    return store.get("Visit", id) as Visit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _referrer(): string {
    let value = this.get("_referrer");
    return value.toString();
  }

  set _referrer(value: string) {
    this.set("_referrer", Value.fromString(value));
  }

  get _visitor(): string {
    let value = this.get("_visitor");
    return value.toString();
  }

  set _visitor(value: string) {
    this.set("_visitor", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedAt(): BigInt {
    let value = this.get("_updatedAt");
    return value.toBigInt();
  }

  set _updatedAt(value: BigInt) {
    this.set("_updatedAt", Value.fromBigInt(value));
  }
}

export class CampaignPlasmaByWeb3 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CampaignPlasmaByWeb3 entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CampaignPlasmaByWeb3 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CampaignPlasmaByWeb3", id.toString(), this);
  }

  static load(id: string): CampaignPlasmaByWeb3 | null {
    return store.get("CampaignPlasmaByWeb3", id) as CampaignPlasmaByWeb3 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _address(): Bytes {
    let value = this.get("_address");
    return value.toBytes();
  }

  set _address(value: Bytes) {
    this.set("_address", Value.fromBytes(value));
  }
}

export class CampaignWeb3ByPlasma extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CampaignWeb3ByPlasma entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CampaignWeb3ByPlasma entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CampaignWeb3ByPlasma", id.toString(), this);
  }

  static load(id: string): CampaignWeb3ByPlasma | null {
    return store.get("CampaignWeb3ByPlasma", id) as CampaignWeb3ByPlasma | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _address(): Bytes {
    let value = this.get("_address");
    return value.toBytes();
  }

  set _address(value: Bytes) {
    this.set("_address", Value.fromBytes(value));
  }
}
