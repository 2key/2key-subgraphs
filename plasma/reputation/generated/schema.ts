// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Campaign entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Campaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Campaign", id.toString(), this);
  }

  static load(id: string): Campaign | null {
    return store.get("Campaign", id) as Campaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Debug extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Debug entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Debug entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Debug", id.toString(), this);
  }

  static load(id: string): Debug | null {
    return store.get("Debug", id) as Debug | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _info(): string | null {
    let value = this.get("_info");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _info(value: string | null) {
    if (value === null) {
      this.unset("_info");
    } else {
      this.set("_info", Value.fromString(value as string));
    }
  }

  get _info1(): string | null {
    let value = this.get("_info1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _info1(value: string | null) {
    if (value === null) {
      this.unset("_info1");
    } else {
      this.set("_info1", Value.fromString(value as string));
    }
  }

  get _info2(): string | null {
    let value = this.get("_info2");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _info2(value: string | null) {
    if (value === null) {
      this.unset("_info2");
    } else {
      this.set("_info2", Value.fromString(value as string));
    }
  }

  get _info3(): string | null {
    let value = this.get("_info3");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _info3(value: string | null) {
    if (value === null) {
      this.unset("_info3");
    } else {
      this.set("_info3", Value.fromString(value as string));
    }
  }
}

export class Feedback extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Feedback entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Feedback entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Feedback", id.toString(), this);
  }

  static load(id: string): Feedback | null {
    return store.get("Feedback", id) as Feedback | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _user(): string | null {
    let value = this.get("_user");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _user(value: string | null) {
    if (value === null) {
      this.unset("_user");
    } else {
      this.set("_user", Value.fromString(value as string));
    }
  }

  get _type(): string | null {
    let value = this.get("_type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _type(value: string | null) {
    if (value === null) {
      this.unset("_type");
    } else {
      this.set("_type", Value.fromString(value as string));
    }
  }

  get _role(): string | null {
    let value = this.get("_role");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _role(value: string | null) {
    if (value === null) {
      this.unset("_role");
    } else {
      this.set("_role", Value.fromString(value as string));
    }
  }

  get _pointsWei(): BigInt | null {
    let value = this.get("_pointsWei");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _pointsWei(value: BigInt | null) {
    if (value === null) {
      this.unset("_pointsWei");
    } else {
      this.set("_pointsWei", Value.fromBigInt(value as BigInt));
    }
  }

  get _reporter(): string | null {
    let value = this.get("_reporter");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _reporter(value: string | null) {
    if (value === null) {
      this.unset("_reporter");
    } else {
      this.set("_reporter", Value.fromString(value as string));
    }
  }

  get _campaign(): string | null {
    let value = this.get("_campaign");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _campaign(value: string | null) {
    if (value === null) {
      this.unset("_campaign");
    } else {
      this.set("_campaign", Value.fromString(value as string));
    }
  }
}

export class Meta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Meta entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Meta entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Meta", id.toString(), this);
  }

  static load(id: string): Meta | null {
    return store.get("Meta", id) as Meta | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _contracts(): Array<Bytes> | null {
    let value = this.get("_contracts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set _contracts(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("_contracts");
    } else {
      this.set("_contracts", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get _n_campaigns(): i32 {
    let value = this.get("_n_campaigns");
    return value.toI32();
  }

  set _n_campaigns(value: i32) {
    this.set("_n_campaigns", Value.fromI32(value));
  }

  get _n_feedbackEvents(): i32 {
    let value = this.get("_n_feedbackEvents");
    return value.toI32();
  }

  set _n_feedbackEvents(value: i32) {
    this.set("_n_feedbackEvents", Value.fromI32(value));
  }

  get _n_reputationEvents(): i32 {
    let value = this.get("_n_reputationEvents");
    return value.toI32();
  }

  set _n_reputationEvents(value: i32) {
    this.set("_n_reputationEvents", Value.fromI32(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedAt(): BigInt {
    let value = this.get("_updatedAt");
    return value.toBigInt();
  }

  set _updatedAt(value: BigInt) {
    this.set("_updatedAt", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _contractorMonetaryRep(): BigInt | null {
    let value = this.get("_contractorMonetaryRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorMonetaryRep");
    } else {
      this.set("_contractorMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _contractorBudgetRep(): BigInt | null {
    let value = this.get("_contractorBudgetRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorBudgetRep");
    } else {
      this.set("_contractorBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _contractorFeedbackRep(): BigInt | null {
    let value = this.get("_contractorFeedbackRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _contractorFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_contractorFeedbackRep");
    } else {
      this.set("_contractorFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerMonetaryRep(): BigInt | null {
    let value = this.get("_referrerMonetaryRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerMonetaryRep");
    } else {
      this.set("_referrerMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerBudgetRep(): BigInt | null {
    let value = this.get("_referrerBudgetRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerBudgetRep");
    } else {
      this.set("_referrerBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _referrerFeedbackRep(): BigInt | null {
    let value = this.get("_referrerFeedbackRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _referrerFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_referrerFeedbackRep");
    } else {
      this.set("_referrerFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterMonetaryRep(): BigInt | null {
    let value = this.get("_converterMonetaryRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterMonetaryRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterMonetaryRep");
    } else {
      this.set("_converterMonetaryRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterBudgetRep(): BigInt | null {
    let value = this.get("_converterBudgetRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterBudgetRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterBudgetRep");
    } else {
      this.set("_converterBudgetRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _converterFeedbackRep(): BigInt | null {
    let value = this.get("_converterFeedbackRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _converterFeedbackRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_converterFeedbackRep");
    } else {
      this.set("_converterFeedbackRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _signupRep(): BigInt | null {
    let value = this.get("_signupRep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _signupRep(value: BigInt | null) {
    if (value === null) {
      this.unset("_signupRep");
    } else {
      this.set("_signupRep", Value.fromBigInt(value as BigInt));
    }
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedAt(): BigInt {
    let value = this.get("_updatedAt");
    return value.toBigInt();
  }

  set _updatedAt(value: BigInt) {
    this.set("_updatedAt", Value.fromBigInt(value));
  }
}

export class Reputation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reputation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reputation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reputation", id.toString(), this);
  }

  static load(id: string): Reputation | null {
    return store.get("Reputation", id) as Reputation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _campaign(): string | null {
    let value = this.get("_campaign");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _campaign(value: string | null) {
    if (value === null) {
      this.unset("_campaign");
    } else {
      this.set("_campaign", Value.fromString(value as string));
    }
  }

  get _user(): string | null {
    let value = this.get("_user");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _user(value: string | null) {
    if (value === null) {
      this.unset("_user");
    } else {
      this.set("_user", Value.fromString(value as string));
    }
  }

  get _type(): string | null {
    let value = this.get("_type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _type(value: string | null) {
    if (value === null) {
      this.unset("_type");
    } else {
      this.set("_type", Value.fromString(value as string));
    }
  }

  get _role(): string | null {
    let value = this.get("_role");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _role(value: string | null) {
    if (value === null) {
      this.unset("_role");
    } else {
      this.set("_role", Value.fromString(value as string));
    }
  }

  get _pointsWei(): BigInt | null {
    let value = this.get("_pointsWei");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _pointsWei(value: BigInt | null) {
    if (value === null) {
      this.unset("_pointsWei");
    } else {
      this.set("_pointsWei", Value.fromBigInt(value as BigInt));
    }
  }
}
