// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Campaign entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Campaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Campaign", id.toString(), this);
  }

  static load(id: string): Campaign | null {
    return store.get("Campaign", id) as Campaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _type(): string | null {
    let value = this.get("_type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _type(value: string | null) {
    if (value === null) {
      this.unset("_type");
    } else {
      this.set("_type", Value.fromString(value as string));
    }
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedTimeStamp(): BigInt {
    let value = this.get("_updatedTimeStamp");
    return value.toBigInt();
  }

  set _updatedTimeStamp(value: BigInt) {
    this.set("_updatedTimeStamp", Value.fromBigInt(value));
  }

  get _rewards(): Array<string> | null {
    let value = this.get("_rewards");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _rewards(value: Array<string> | null) {
    if (value === null) {
      this.unset("_rewards");
    } else {
      this.set("_rewards", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Meta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Meta entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Meta entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Meta", id.toString(), this);
  }

  static load(id: string): Meta | null {
    return store.get("Meta", id) as Meta | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _n_addPendingRewards(): i32 {
    let value = this.get("_n_addPendingRewards");
    return value.toI32();
  }

  set _n_addPendingRewards(value: i32) {
    this.set("_n_addPendingRewards", Value.fromI32(value));
  }

  get _n_paidPendingRewards(): i32 {
    let value = this.get("_n_paidPendingRewards");
    return value.toI32();
  }

  set _n_paidPendingRewards(value: i32) {
    this.set("_n_paidPendingRewards", Value.fromI32(value));
  }

  get _n_paidPendingRewardsDep(): i32 {
    let value = this.get("_n_paidPendingRewardsDep");
    return value.toI32();
  }

  set _n_paidPendingRewardsDep(value: i32) {
    this.set("_n_paidPendingRewardsDep", Value.fromI32(value));
  }

  get _version(): i32 {
    let value = this.get("_version");
    return value.toI32();
  }

  set _version(value: i32) {
    this.set("_version", Value.fromI32(value));
  }

  get _contracts(): Array<Bytes> | null {
    let value = this.get("_contracts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set _contracts(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("_contracts");
    } else {
      this.set("_contracts", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get _subgraphType(): string {
    let value = this.get("_subgraphType");
    return value.toString();
  }

  set _subgraphType(value: string) {
    this.set("_subgraphType", Value.fromString(value));
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedAt(): BigInt {
    let value = this.get("_updatedAt");
    return value.toBigInt();
  }

  set _updatedAt(value: BigInt) {
    this.set("_updatedAt", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _pending_rewards_wei_non_rebalanced(): BigInt | null {
    let value = this.get("_pending_rewards_wei_non_rebalanced");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _pending_rewards_wei_non_rebalanced(value: BigInt | null) {
    if (value === null) {
      this.unset("_pending_rewards_wei_non_rebalanced");
    } else {
      this.set(
        "_pending_rewards_wei_non_rebalanced",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get _pending_rewards_ppc_wei_non_rebalanced(): BigInt | null {
    let value = this.get("_pending_rewards_ppc_wei_non_rebalanced");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _pending_rewards_ppc_wei_non_rebalanced(value: BigInt | null) {
    if (value === null) {
      this.unset("_pending_rewards_ppc_wei_non_rebalanced");
    } else {
      this.set(
        "_pending_rewards_ppc_wei_non_rebalanced",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get _paid_rewards_wei_rebalanced(): BigInt | null {
    let value = this.get("_paid_rewards_wei_rebalanced");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _paid_rewards_wei_rebalanced(value: BigInt | null) {
    if (value === null) {
      this.unset("_paid_rewards_wei_rebalanced");
    } else {
      this.set(
        "_paid_rewards_wei_rebalanced",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get _paid_rewards_wei_non_rebalanced(): BigInt | null {
    let value = this.get("_paid_rewards_wei_non_rebalanced");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _paid_rewards_wei_non_rebalanced(value: BigInt | null) {
    if (value === null) {
      this.unset("_paid_rewards_wei_non_rebalanced");
    } else {
      this.set(
        "_paid_rewards_wei_non_rebalanced",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get _paid_rewards_ppc_wei_rebalanced(): BigInt | null {
    let value = this.get("_paid_rewards_ppc_wei_rebalanced");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _paid_rewards_ppc_wei_rebalanced(value: BigInt | null) {
    if (value === null) {
      this.unset("_paid_rewards_ppc_wei_rebalanced");
    } else {
      this.set(
        "_paid_rewards_ppc_wei_rebalanced",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get _paid_rewards_ppc_wei_non_rebalanced(): BigInt | null {
    let value = this.get("_paid_rewards_ppc_wei_non_rebalanced");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _paid_rewards_ppc_wei_non_rebalanced(value: BigInt | null) {
    if (value === null) {
      this.unset("_paid_rewards_ppc_wei_non_rebalanced");
    } else {
      this.set(
        "_paid_rewards_ppc_wei_non_rebalanced",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get _rewards(): Array<string> | null {
    let value = this.get("_rewards");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set _rewards(value: Array<string> | null) {
    if (value === null) {
      this.unset("_rewards");
    } else {
      this.set("_rewards", Value.fromStringArray(value as Array<string>));
    }
  }

  get _timeStamp(): BigInt {
    let value = this.get("_timeStamp");
    return value.toBigInt();
  }

  set _timeStamp(value: BigInt) {
    this.set("_timeStamp", Value.fromBigInt(value));
  }

  get _updatedAt(): BigInt {
    let value = this.get("_updatedAt");
    return value.toBigInt();
  }

  set _updatedAt(value: BigInt) {
    this.set("_updatedAt", Value.fromBigInt(value));
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reward", id.toString(), this);
  }

  static load(id: string): Reward | null {
    return store.get("Reward", id) as Reward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _user(): string {
    let value = this.get("_user");
    return value.toString();
  }

  set _user(value: string) {
    this.set("_user", Value.fromString(value));
  }

  get _amount_added_wei_non_rabalanced(): BigInt {
    let value = this.get("_amount_added_wei_non_rabalanced");
    return value.toBigInt();
  }

  set _amount_added_wei_non_rabalanced(value: BigInt) {
    this.set("_amount_added_wei_non_rabalanced", Value.fromBigInt(value));
  }

  get _amount_paid_wei_rebalanced(): BigInt {
    let value = this.get("_amount_paid_wei_rebalanced");
    return value.toBigInt();
  }

  set _amount_paid_wei_rebalanced(value: BigInt) {
    this.set("_amount_paid_wei_rebalanced", Value.fromBigInt(value));
  }

  get _campaign(): string {
    let value = this.get("_campaign");
    return value.toString();
  }

  set _campaign(value: string) {
    this.set("_campaign", Value.fromString(value));
  }

  get _added(): boolean {
    let value = this.get("_added");
    return value.toBoolean();
  }

  set _added(value: boolean) {
    this.set("_added", Value.fromBoolean(value));
  }
}
